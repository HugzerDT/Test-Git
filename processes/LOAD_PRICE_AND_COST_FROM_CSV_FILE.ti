#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****


#####################################
# Project : Datatilt - Formation
# Process : LoadPriceAndCostCSV_1
# Description : Chargement du cube Price_and_Cost
# Created by : Datatilt
# Date : 07/12/2023
#####################################

# Revisions:
#    v 1.0.0  - 07 dec. 2023 - initial release 


# ==================================================================================
# --  VARIABLES
# ==================================================================================

# G_N_NB_ERRORS contains the number of errors logged in the chain of processes.
NumericGlobalVariable( 'G_N_NB_ERRORS');

# G_S_MAIN_TI_PROCESS  is the name of the (caller) process.
StringGlobalVariable( 'G_S_MAIN_TI_PROCESS');


sCubeTarget =  'Price_and_Cost';

vTM1USER = IF( SCAN ( '*' , TM1USER() ) <> 0 , DELET( TM1USER() , 2 , 1 ) , TM1USER());

sViewNameTarget = 'Vue_Target_Cube_' | sCubeTarget | '_' | vTM1USER| '_' |   GetProcessName() ;
sSubsetNameTarget = 'Subset_Target_Cube_' | sCubeTarget | '_' | vTM1USER | '_' |   GetProcessName() ;

# ==================================================================================
# --  PARAMETER VERIFICATION
# ==================================================================================

# Check P_S_FILENAME
# -------------------------------------
if( P_S_FILENAME@= '') ;
	V_S_BLOCK_MSG = 'Erreur: le fichier source (P_S_FILENAME) doit être défini. Abandon.';
	V_N_BLOCK_ERROR = 1;
	ProcessBreak;
endif;

sPATH = CellGetS( 'zParam', 'Path', 'Value'  );


if(SCAN('.csv', P_S_FILENAME) = 0);
	sFile = sPATH | '\' | P_S_FILENAME | '.csv';
else;
	sFile = sPATH | '\' | P_S_FILENAME;
endif;

# Check if the file exist
if( FileExists( sFile) = 0) ;
	V_S_BLOCK_MSG = 'Erreur. le fichier source (''' | P_S_FILENAME | ''') n''existe pas. Abandon.';
	V_N_BLOCK_ERROR = 1;
	ProcessBreak;
endif;

# ==================================================================================
# -- DATASOURCE PARAMETERS
# ==================================================================================

### FILE ###
DatasourceNameForServer=sFile;
DatasourceASCIIHeaderRecords = 1;
DatasourceASCIIDelimiter=',';

# ==================================================================================
# -- TARGET VIEW RESET
# ==================================================================================

sDimName = 'Channels';

# Create MDX subset 
sMdx = '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['| sDimName |'] )}, 0)}';
SubsetCreatebyMDX( sSubsetNameTarget, sMdx, P_N_TEMP);
nSubsetSize = SubsetGetSize( sDimName, sSubsetNameTarget);
if( nSubsetSize = 0) ;
  V_S_BLOCK_MSG =  'Erreur: La creation d''un sous-ensemble sur la dimension ' | sDimName | ' a échoué. Abandon';
  V_N_BLOCK_ERROR = 1;
  ProcessBreak;
endif;
# Make the subset static
SubsetMDXSet( sDimName, sSubsetNameTarget, '');
    
sDimName = 'Products';
# Create MDX subset 
sMdx = '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['| sDimName |'] )}, 0)}';
SubsetCreatebyMDX( sSubsetNameTarget, sMdx, P_N_TEMP);
nSubsetSize = SubsetGetSize( sDimName, sSubsetNameTarget);
if( nSubsetSize = 0) ;
  V_S_BLOCK_MSG =  'Erreur: La creation d''un sous-ensemble sur la dimension ' | sDimName | ' a échoué. Abandon';
  V_N_BLOCK_ERROR = 1;
  ProcessBreak;
endif;
# Make the subset static
SubsetMDXSet( sDimName, sSubsetNameTarget, '');

sDimName = 'Months';
# Create MDX subset 
sMdx = '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['| sDimName |'] )}, 0)}';
SubsetCreatebyMDX( sSubsetNameTarget, sMdx, P_N_TEMP);
nSubsetSize = SubsetGetSize( sDimName, sSubsetNameTarget);
if( nSubsetSize = 0) ;
  V_S_BLOCK_MSG =  'Erreur: La creation d''un sous-ensemble sur la dimension ' | sDimName | ' a échoué. Abandon';
  V_N_BLOCK_ERROR = 1;
  ProcessBreak;
endif;
# Make the subset static
SubsetMDXSet( sDimName, sSubsetNameTarget, '');

sDimName = 'Versions';
# Create MDX subset 
sMdx = '{ ['| sDimName |'].[Budget version 1], ['| sDimName |'].[Budget version 2]}';            
SubsetCreatebyMDX( sSubsetNameTarget, sMdx, P_N_TEMP);
nSubsetSize = SubsetGetSize( sDimName, sSubsetNameTarget);
if( nSubsetSize = 0) ;
  V_S_BLOCK_MSG =  'Erreur: La creation d''un sous-ensemble sur la dimension ' | sDimName | ' a échoué. Abandon';
  V_N_BLOCK_ERROR = 1;
  ProcessBreak;
endif;
# Make the subset static
SubsetMDXSet( sDimName, sSubsetNameTarget, '');

sDimName = 'Price_and_Cost_Measures';
# Create MDX subset 
sMdx = '{ ['| sDimName |'].[Unit cost], ['| sDimName |'].[Unit sale price]}';
SubsetCreatebyMDX( sSubsetNameTarget, sMdx, P_N_TEMP);
nSubsetSize = SubsetGetSize( sDimName, sSubsetNameTarget);
if( nSubsetSize = 0) ;
  V_S_BLOCK_MSG =  'Erreur: La creation d''un sous-ensemble sur la dimension ' | sDimName | ' a échoué. Abandon';
  V_N_BLOCK_ERROR = 1;
  ProcessBreak;
endif;
# Make the subset static
SubsetMDXSet( sDimName, sSubsetNameTarget, '');

# *** Target view creation
# ****************************************
If(ViewExists(sCubeTarget, sViewNameTarget) = 1); 
	ViewDestroy(sCubeTarget, sViewNameTarget); 
EndIf; 	
ViewCreate(sCubeTarget, sViewNameTarget, P_N_TEMP);
  
# *** Target vue subsets assignement
# ****************************************
nIndex = 1;
While(TABDIM(sCubeTarget, nIndex) @<> '');
  sDimName = TABDIM(sCubeTarget, nIndex);
  ViewSubsetAssign(sCubeTarget, sViewNameTarget, sDimName, sSubsetNameTarget);
  nIndex = nIndex + 1;
End;

# *** Cube logging deactivation
# ****************************************
sCubeLogChanges = CellGetS('}CubeProperties', sCubeTarget, 'LOGGING');
CellPutS('', '}CubeProperties', sCubeTarget, 'LOGGING');
  
ViewZeroOut( sCubeTarget , sViewNameTarget );

#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****


if( CellIsUpdateable( sCubeTarget, V_S_CHANNEL, V_S_PRODUCT,V_S_MONTH,V_S_VERSION,'Unit Sale Price') = 1);
	CellPutN(V_N_PRICE,sCubeTarget,V_S_CHANNEL, V_S_PRODUCT,V_S_MONTH,V_S_VERSION,'Unit Sale Price');
endif;

if( CellIsUpdateable( sCubeTarget, V_S_CHANNEL, V_S_PRODUCT,V_S_MONTH,V_S_VERSION,'Unit cost') = 1);
	CellPutN(V_N_COST,sCubeTarget,V_S_CHANNEL, V_S_PRODUCT,V_S_MONTH,V_S_VERSION,'Unit cost');
endif;
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****


# *** Cube logging reactivation
# ****************************************
CellPutS(sCubeLogChanges, '}CubeProperties', sCubeTarget, 'LOGGING');



# Finishing Blocking errors handling - terminates the process 
if( V_N_BLOCK_ERROR > 0) ;

	# ABORT PROCESS
	ItemReject( V_S_BLOCK_MSG);
	ProcessError();
endif;
#endregion